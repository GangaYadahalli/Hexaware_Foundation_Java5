package com.hexaware.ams.service;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.List;

import com.hexaware.ams.dao.AssetManagementDaoImpl;
import com.hexaware.ams.dao.IAssetManagementDao;
import com.hexaware.ams.entity.AssetAllocation;
import com.hexaware.ams.entity.Assets;
import com.hexaware.ams.entity.MaintenanceRecords;
import com.hexaware.ams.entity.Reservations;
import com.hexaware.ams.exception.AssetNotFoundException;
import com.hexaware.ams.exception.AssetNotMaintainException;

public class AssetManagementServiceImpl implements IAssetManagementService {

	private IAssetManagementDao dao;
	public AssetManagementServiceImpl()
	{
		dao=new AssetManagementDaoImpl();
		
	}
	@Override
	public boolean addAsset(Assets asset) {
		
		return  dao.addAsset(asset);
	}

	@Override
	public boolean updateAsset(Assets asset) {
		
		return dao.updateAsset(asset);
	}

	@Override
	public boolean deleteAsset(int assetId) {
		 boolean delete=dao.deleteAsset(assetId);
			
		    if (!dao.deleteAsset(assetId)) {
		        throw new AssetNotFoundException("Invalid Asset ID: " + assetId); 
		    }

		    return delete;
		
		
	}

	@Override
	public boolean allocateAsset(int assetId, int employeeId, Date allocationDate) {
		
		return dao.allocateAsset(assetId, employeeId, allocationDate);
	}

	@Override
	public boolean deallocateAsset(int assetId, int employeeId, Date returnDate) {
		
		return dao.deallocateAsset(assetId,employeeId,returnDate);
	}

	@Override
	public boolean withdrawReservation(int reservationId) {
	
		return dao.withdrawReservation(reservationId);
	}
	
public static boolean validateAsset(Assets  asset) {
		
		
		boolean flag=false;
		
		if(asset.getAssetId()>0 && asset.getName().length()>3 && asset.getType().length()>3 && asset.getSerialNumber()>1000 && asset.getOwnerId()>100) {
			
			flag=true;
		}
		return flag;
	}


public static boolean validateAssetUpdate(Assets  asset) {
boolean flag=false;

if(asset.getAssetId()>0 && asset.getName().length()>3 ) {
	
	flag=true;
}
return flag;
}
public static boolean validateAssetDelete(Assets  asset) {
boolean flag=false;

if(asset.getAssetId()>0 ) {
	
	flag=true;
}
return flag;
}
public static boolean validateAssetAllocation(AssetAllocation allocate) {
boolean flag=false;

if(allocate.getAssetId()>0 && allocate.getEmployeeId()> 100) {
	
	flag=true;
}
return flag;
}
public static boolean validateWithdrawReservation(Reservations reservations) {
boolean flag=false;

if(reservations.getReservationId() >20000) {
	
	flag=true;
}
return flag;
}



@Override
public boolean performMaintenance(int assetId, Date maintenanceDate, String description, double cost) {
	

   return dao.performMaintenance(assetId, maintenanceDate, description, cost);
}
public static boolean vaildateRecords(MaintenanceRecords records) {
	
	
	boolean flag=false;
	
	if(records.getAssetId()>0 && records.getDescription().length()>3  ) {
		
		flag=true;
	}
	return flag;
}
@Override
public boolean reserveAsset(int assetId, int employeeId, Date reservationDate, Date startDate, Date endDate,
		String status) {
	
	return dao.reserveAsset(assetId, employeeId, reservationDate, startDate, endDate, status);
}
public static boolean vaildateReservation(Reservations reservation) {
	
	
	boolean flag=false;
	
	if(reservation.getAssetId()>0 && reservation.getEmployeeId()>100  ) {
		
		flag=true;
	}
	return flag;
}
//@Override
//public boolean maintenanceDate(MaintenanceRecords int assetId) throws AssetNotMaintainException {
//	
//
//		 try {
//	            
//	            return dao.maintenanceDate(assetId);
//
//	        } catch (Exception e) {
//	            
//	            System.err.println("Database error: " + e.getMessage());
//	            return false;
//	        }
//}
@Override
public boolean maintenanceDate(MaintenanceRecords assetId) throws AssetNotMaintainException {
	try {
        
        return dao.maintenanceDate(assetId);

    } catch (Exception e) {
        
        System.err.println("Database error: " + e.getMessage());
        return false;
    }
	return false;
}
}
//         boolean lastMaintenanceDate = dao.maintenanceDate(assetId);
//         
//         if (lastMaintenanceDate != null) {
//
//             Calendar maintenanceCal = Calendar.getInstance();
//             maintenanceCal.setTime(lastMaintenanceDate);
//
//             // Get the current date
//             Calendar currentCal = Calendar.getInstance();
//
//             // Calculate the difference in years between the maintenance date and the current date
//             int yearDifference = currentCal.get(Calendar.YEAR) - maintenanceCal.get(Calendar.YEAR);
//
//             // Check if the asset has not been maintained for more than 2 years
//             if (yearDifference > 2 || (yearDifference == 2 && currentCal.get(Calendar.DAY_OF_YEAR) >= maintenanceCal.get(Calendar.DAY_OF_YEAR))) {
//                 throw new AssetNotMaintainException("Asset has not been maintained for more than 2 years.");
//             }
//
//             return true;  // Asset has been maintained within the last 2 years
//         } else {
//             throw new AssetNotFoundException("Asset ID not found or no maintenance record exists.");
//         }
//
//     } catch (SQLException e) {
//         // Handle any SQL exceptions that occurred in the DAO layer
//         e.printStackTrace();
//         return false;
//     } catch (AssetNotMaintainException | AssetNotFoundException e) {
//         // Handle custom exceptions (log, rethrow, or return a message depending on your needs)
//         System.err.println(e.getMessage());
//         return false;
//     }
// }
//}
//}

	 

