package com.hexaware.ams.test;

import static org.junit.jupiter.api.Assertions.fail;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import com.hexaware.ams.entity.*;
import com.hexaware.ams.exception.AssetNotFoundException;
import com.hexaware.ams.service.AssetManagementServiceImpl;
import com.hexaware.ams.service.IAssetManagementService;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Calendar;
import java.util.GregorianCalendar;

class AssetManagementServiceImplTest {
	static IAssetManagementService service;
	@BeforeAll  
	public static void beforeAll() {
		
		service = new AssetManagementServiceImpl();
		
	}
	
	
	@Test
	void testAddAsset() {

		Date date=Date.valueOf("2023-02-28");
	    Assets asset = new Assets(40, "chair", "Furniture", 1040, date, "Office", "inuse", 103);

	    boolean count = service.addAsset(asset);

	 
	    assertTrue(count, "The asset should be added successfully");
	}



	@Test
	void testPerformMaintenance()
	{
		Date date=Date.valueOf("2024-02-28");
		boolean count=service.performMaintenance(8,date, "DeskRepair",3000.0);
		
		assertTrue(count,"The maintenanceRecords should be added successfully");
	}
	}
//	@Test
//	void testReserveAsset()
//	{
//		LocalDate localDate = LocalDate.of(2024, 10, 10);
//		java.util.Date hardCodedDate = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
//		boolean count=service.reserveAsset(0, 0, null, null, null, null);
//		
//		assertTrue(count,"The reservation should be added successfully");
//		
//	}
//	@Test
//	void testDeleteAsset()
//	{
//		 Assets assetService = new Assets();
//	        int assetId = 99; 
//
//	        boolean exceptionThrown = false;
//	        try {
//	        	 boolean assertService = service.deleteAsset(assetId);
//	            
//	        } catch (AssetNotFoundException e) {
//	            exceptionThrown = true;
//	            assertEquals("Asset with ID 999 not found.", e.getMessage());
//	        }
//
//	        assertTrue(exceptionThrown, "AssetNotFoundException should be thrown for non-existent asset ID");
//	    }
//
//	}


